#!/bin/env python3
# Requires plotly: https://plotly.com/python/getting-started/
# Requires matplotlib: https://matplotlib.org/stable/users/getting_started/index.html

import sys
import getopt
import plotly.figure_factory as ff
import fileinput
import datetime
from datetime import datetime
import re
import math
import gantt
from pprint import pformat

class Options:
    regex: str = r"(?P<datetime>[^,]+),((?P<start>start)|end),(?P<scalar>[0-9]+),(?P<swimlane>.+)"
    datetime_format: str = '%Y-%m-%d %H:%M:%S.%f'
    label_format: str = '{scalar:d} in {duration}'
    scalar_max: int = None
    output: str = None
    output_format: str = 'svg'
    show: bool = True
    debug: bool = False

def usage():
    defaults = Options()
    return f"""Usage:    logs2gants [<options>] input_file

    --help               Print this help message and exit.
    --regex              A regex to extract information from logs.
                         Default: {defaults.regex}
                         Must include capture groups as follows:
                             ?P<start>      An arbitrary group that, if matched, marks the log as representing the "start" of a segment.
                                            Other logs matching the regexp but without a match for this group are considered as the "end" of a segment.
                             ?P<datetime>   The date/time assigned to the segment.
                             ?P<scalar>     The scalar value assigned to the segment (used for coloring).
                             ?P<swimlane>   The identifier of the swimlane the segment belongs to.
    --datetime-format    The format to use when extracting date/times.
                         Default: {defaults.datetime_format}
                         See https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior
    --label-format       The format to use when rendering segment labels.
                         Default: {defaults.label_format}
                         Can rely on the following named parameters:
                             scalar        The scalar value assigned to the segment.
                             duration      The duration of the segment.
    --scalar-max         The maximum to use for the color scale of segments.
                         Defaults to dynamically determining the max based on all segments.
    --output             The name of a file to save the Gantt chart to.
                         Default to not saving any file.
    --output-format      The format of the saved file.
                         Default: {defaults.output_format}
                         Accepted values: 'png' or 'svg'.
    --show               Whether to open a window to show the Gantt char.
                         Default: {defaults.show}
    --debug              Print debug information during execution.
                         Default: {defaults.debug}
    """
    

try:
    opts, args = getopt.getopt(sys.argv[1:], "", ["regex=", "datetime-format=", "scalar-max=", "label-format=", "output=", "output-format=", "show", "no-show", "help", "debug"])
except getopt.GetoptError as err:
    print(err, file = sys.stderr)
    print("", file = sys.stderr)
    print(usage(), file = sys.stderr)
    sys.exit(2)

options = Options()

for o, v in opts:
    if o == "--help":
        print(usage(), file = sys.stderr)
        sys.exit(0)
    if o == "--regex":
        options.regex = re.compile(v)
    elif o == "--datetime-format":
        options.datetime_format = v
    elif o == "--label-format":
        options.label_format = v
    elif o == "--scalar-max":
        options.scalar_max = int(v)
    elif o == "--output":
        options.output = v
    elif o == "--output-format":
        options.output_format = v
    elif o == "--show":
        options.show = True
    elif o == "--no-show":
        options.show = False
    elif o == "--debug":
        options.debug = True
    else:
        assert False, "unhandled option"

if options.debug:
    print(f"Options: {pformat(vars(options))}", file = sys.stderr)

if len(args) == 0:
    print("Missing input_file argument", file = sys.stderr)
    print("", file = sys.stderr)
    print(usage(), file = sys.stderr)
    sys.exit(2)
if len(args) > 1:
    print(f"Too many non-option arguments: {args}", file = sys.stderr)
    print("", file = sys.stderr)
    print(usage(), file = sys.stderr)
    sys.exit(2)

input_file = args[0]

task_segments = {}

has_scalars = 'scalar' in options.regex.groupindex

for line in fileinput.input(input_file):
    match = re.search(options.regex, line)
    if match is None:
        continue
    is_start = match.group('start') is not None

    datetime_str = match.group('datetime')
    thedatetime = datetime.strptime(datetime_str, options.datetime_format)

    scalar = 0
    if has_scalars:
        scalar_str = match.group('scalar')
        scalar=int(scalar_str)

    swimlane = match.group('swimlane')

    if options.debug:
        print(line)
        print({'is_start': is_start, 'thedatetime': thedatetime, 'scalar': scalar, 'swimlane': swimlane})

    segments = task_segments.setdefault(swimlane, [])
    if is_start:
        segment = gantt.Task(start=thedatetime, score=scalar, end=None, label=None)
        segments.append(segment)
    else:
        segment = segments[-1]
        segment.end = thedatetime
        segment.label = options.label_format.format(scalar=scalar, duration=segment.end-segment.start)

if len(task_segments) == 0:
    print("No segment found", file = sys.stderr)
    sys.exit(1)

for segments in task_segments.values():
    for segment in segments:
        if segment.end is None:
            print(f"Segment at {datetime.strftime(segment.start, options.datetime_format)} has no end; defaulting to end=start", file = sys.stderr)
            segment.end = segment.start
            segment.label = options.label_format.format(scalar=scalar, duration=segment.end-segment.start)

if has_scalars:
    # Compute the max automatically if necessary
    scalar_max = options.scalar_max
    if scalar_max is None:
        scalar_max = 0
        for (ignored, segments) in task_segments.items():
            for segment in segments:
                scalar = segment.score
                if scalar > scalar_max:
                    scalar_max = scalar
    # Normalize scores using a logarithmic function
    for segments in task_segments.values():
        for segment in segments:
            scalar = segment.score
            segment.score = math.log10(1 + float(scalar)/scalar_max*9)

plot = gantt.create_gantt(task_segments, title=input_file)

if options.output:
    plot.savefig(options.output, format=options.output_format)
if options.show:
    plot.show()

